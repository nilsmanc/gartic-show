import React from 'react'
import { io, Socket } from 'socket.io-client'
import type { NextPage } from 'next'
import Head from 'next/head'

import { Canvas, PaintCoords } from '../../components/Canvas'

import styles from './../../styles/Game.module.scss'

type MessageChat = {
  name: string
  text: string
}

const Home: NextPage = () => {
  const socketRef = React.useRef<Socket>()
  const canvasCtxRef = React.useRef<CanvasRenderingContext2D>()
  const [messages, setMessages] = React.useState<MessageChat[]>([])
  const [inputValue, setInputValue] = React.useState('')

  React.useEffect(() => {
    if (!socketRef.current) {
      socketRef.current = io(
        'https://web-production-a479.up.railway.app' || 'http://localhost:3000',
      )

      socketRef.current.on('clear_canvas', () => {
        if (canvasCtxRef.current) {
          canvasCtxRef.current?.clearRect(0, 0, 1000, 600)
        }
      })

      socketRef.current.on('receive_message', (data) => {
        setMessages((prev) => [...prev, data])
      })

      socketRef.current.on('repaint', ({ x, y, dx, dy }) => {
        if (canvasCtxRef.current) {
          canvasCtxRef.current.beginPath()
          canvasCtxRef.current.moveTo(x, y)
          canvasCtxRef.current.lineTo(x - dx, y - dy)
          canvasCtxRef.current.stroke()
          canvasCtxRef.current.closePath()
        }
      })
    }

    return () => {
      if (socketRef.current) {
        socketRef.current?.disconnect()
      }
    }
  }, [])

  const onPaint = (data: PaintCoords) => {
    if (socketRef.current) {
      socketRef.current.emit('paint', data)
    }
  }

  const onClear = () => {
    if (socketRef.current) {
      socketRef.current.emit('clear')
    }
  }

  const onClickSendMessage = () => {
    if (socketRef.current) {
      socketRef.current.emit('send_message', {
        name: 'Nickname',
        text: inputValue,
      })
      setInputValue('')
    }
  }

  return (
    <div>
      <Head>
        <title>Игра</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/icon.ico' />
      </Head>
      <div className={styles.game}>
        <div className={styles.chat}>
          <div className={styles.chatTitle}>Чат</div>
          <div className={styles.chatMessages}>
            {messages.map((obj, i) => (
              <div key={i} className={styles.chatItem}>
                <b>{obj.name}</b>
                <p>{obj.text}</p>
              </div>
            ))}
          </div>
          <div className={styles.chatInput}>
            <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} type='text' />
            <button onClick={onClickSendMessage}>Отправить</button>
          </div>
        </div>
        <div className={styles.canvas}>
          <Canvas
            onPaint={onPaint}
            onInit={(canvasCtx) => (canvasCtxRef.current = canvasCtx)}
            onClear={onClear}
          />
          <div id='paint' />
        </div>
      </div>
    </div>
  )
}

export default Home
